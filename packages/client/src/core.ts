/* eslint-disable */
// This file was generated by [rspc](https://github.com/oscartbeaumont/rspc). Do not edit this file manually.

export type Procedures = {
    queries:
        { key: "buildInfo", input: never, result: BuildInfo } |
        { key: "categories.list", input: LibraryArgs<null>, result: { [key in Category]: number } } |
        { key: "files.get", input: LibraryArgs<GetArgs>, result: { id: number; pub_id: number[]; kind: number; key_id: number | null; hidden: boolean; favorite: boolean; important: boolean; has_thumbnail: boolean; has_thumbstrip: boolean; has_video_preview: boolean; ipfs_id: string | null; note: string | null; date_created: string; date_accessed: string | null; file_paths: FilePath[]; media_data: MediaData | null } | null } |
        { key: "invalidation.test-invalidate", input: never, result: number } |
        { key: "jobs.getHistory", input: LibraryArgs<null>, result: JobReport[] } |
        { key: "jobs.getRunning", input: LibraryArgs<null>, result: JobReport[] } |
        { key: "library.list", input: never, result: LibraryConfigWrapped[] } |
        { key: "library.statistics", input: LibraryArgs<null>, result: Statistics } |
        { key: "locations.get", input: LibraryArgs<number>, result: Location | null } |
        { key: "locations.getWithRules", input: LibraryArgs<number>, result: LocationWithIndexerRules | null } |
        { key: "locations.indexer_rules.get", input: LibraryArgs<number>, result: IndexerRule } |
        { key: "locations.indexer_rules.list", input: LibraryArgs<null>, result: IndexerRule[] } |
        { key: "locations.indexer_rules.listForLocation", input: LibraryArgs<number>, result: IndexerRule[] } |
        { key: "locations.list", input: LibraryArgs<null>, result: { id: number; pub_id: number[]; node_id: number; name: string; path: string; total_capacity: number | null; available_capacity: number | null; is_archived: boolean; generate_preview_media: boolean; sync_preview_media: boolean; hidden: boolean; date_created: string; node: Node }[] } |
        { key: "nodeState", input: never, result: NodeState } |
        { key: "search.objects", input: LibraryArgs<ObjectSearchArgs>, result: SearchData<ExplorerItem> } |
        { key: "search.paths", input: LibraryArgs<FilePathSearchArgs>, result: SearchData<ExplorerItem> } |
        { key: "sync.messages", input: LibraryArgs<null>, result: CRDTOperation[] } |
        { key: "tags.get", input: LibraryArgs<number>, result: Tag | null } |
        { key: "tags.getForObject", input: LibraryArgs<number>, result: Tag[] } |
        { key: "tags.list", input: LibraryArgs<null>, result: Tag[] } |
        { key: "volumes.list", input: never, result: Volume[] },
    mutations:
        { key: "files.copyFiles", input: LibraryArgs<FileCopierJobInit>, result: null } |
        { key: "files.cutFiles", input: LibraryArgs<FileCutterJobInit>, result: null } |
        { key: "files.delete", input: LibraryArgs<number>, result: null } |
        { key: "files.deleteFiles", input: LibraryArgs<FileDeleterJobInit>, result: null } |
        { key: "files.duplicateFiles", input: LibraryArgs<FileCopierJobInit>, result: null } |
        { key: "files.eraseFiles", input: LibraryArgs<FileEraserJobInit>, result: null } |
        { key: "files.removeAccessTime", input: LibraryArgs<number>, result: null } |
        { key: "files.renameFile", input: LibraryArgs<RenameFileArgs>, result: null } |
        { key: "files.setFavorite", input: LibraryArgs<SetFavoriteArgs>, result: null } |
        { key: "files.setNote", input: LibraryArgs<SetNoteArgs>, result: null } |
        { key: "files.updateAccessTime", input: LibraryArgs<number>, result: null } |
        { key: "invalidation.test-invalidate-mutation", input: LibraryArgs<null>, result: null } |
        { key: "jobs.clear", input: LibraryArgs<string>, result: null } |
        { key: "jobs.clearAll", input: LibraryArgs<null>, result: null } |
        { key: "jobs.generateThumbsForLocation", input: LibraryArgs<GenerateThumbsForLocationArgs>, result: null } |
        { key: "jobs.identifyUniqueFiles", input: LibraryArgs<IdentifyUniqueFilesArgs>, result: null } |
        { key: "jobs.objectValidator", input: LibraryArgs<ObjectValidatorArgs>, result: null } |
        { key: "library.create", input: CreateLibraryArgs, result: LibraryConfigWrapped } |
        { key: "library.delete", input: string, result: null } |
        { key: "library.edit", input: EditLibraryArgs, result: null } |
        { key: "locations.addLibrary", input: LibraryArgs<LocationCreateArgs>, result: null } |
        { key: "locations.create", input: LibraryArgs<LocationCreateArgs>, result: null } |
        { key: "locations.delete", input: LibraryArgs<number>, result: null } |
        { key: "locations.fullRescan", input: LibraryArgs<number>, result: null } |
        { key: "locations.indexer_rules.create", input: LibraryArgs<IndexerRuleCreateArgs>, result: null } |
        { key: "locations.indexer_rules.delete", input: LibraryArgs<number>, result: null } |
        { key: "locations.relink", input: LibraryArgs<string>, result: null } |
        { key: "locations.update", input: LibraryArgs<LocationUpdateArgs>, result: null } |
        { key: "nodes.changeNodeName", input: ChangeNodeNameArgs, result: NodeConfig } |
        { key: "p2p.acceptSpacedrop", input: [string, string | null], result: null } |
        { key: "p2p.spacedrop", input: SpacedropArgs, result: null } |
        { key: "tags.assign", input: LibraryArgs<TagAssignArgs>, result: null } |
        { key: "tags.create", input: LibraryArgs<TagCreateArgs>, result: Tag } |
        { key: "tags.delete", input: LibraryArgs<number>, result: null } |
        { key: "tags.update", input: LibraryArgs<TagUpdateArgs>, result: null },
    subscriptions:
        { key: "invalidation.listen", input: never, result: InvalidateOperationEvent[] } |
        { key: "jobs.newThumbnail", input: LibraryArgs<null>, result: string[] } |
        { key: "locations.online", input: never, result: number[][] } |
        { key: "locations.quickRescan", input: LibraryArgs<LightScanArgs>, result: null } |
        { key: "p2p.events", input: never, result: P2PEvent } |
}
